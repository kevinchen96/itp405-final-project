{"version":3,"sources":["itp405-final-project/tests/helpers/destroy-app.js","itp405-final-project/tests/helpers/module-for-acceptance.js","itp405-final-project/tests/helpers/resolver.js","itp405-final-project/tests/helpers/start-app.js","itp405-final-project/tests/test-helper.js","itp405-final-project/tests/unit/controllers/create-event-test.js","itp405-final-project/tests/unit/controllers/profile-test.js","itp405-final-project/tests/unit/controllers/register-test.js","itp405-final-project/tests/unit/controllers/results/events-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('itp405-final-project/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('itp405-final-project/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'itp405-final-project/tests/helpers/start-app', 'itp405-final-project/tests/helpers/destroy-app'], function (exports, _qunit, _itp405FinalProjectTestsHelpersStartApp, _itp405FinalProjectTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _itp405FinalProjectTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _itp405FinalProjectTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('itp405-final-project/tests/helpers/resolver', ['exports', 'itp405-final-project/resolver', 'itp405-final-project/config/environment'], function (exports, _itp405FinalProjectResolver, _itp405FinalProjectConfigEnvironment) {\n\n  var resolver = _itp405FinalProjectResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _itp405FinalProjectConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _itp405FinalProjectConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('itp405-final-project/tests/helpers/start-app', ['exports', 'ember', 'itp405-final-project/app', 'itp405-final-project/config/environment'], function (exports, _ember, _itp405FinalProjectApp, _itp405FinalProjectConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _itp405FinalProjectConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _itp405FinalProjectApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('itp405-final-project/tests/test-helper', ['exports', 'itp405-final-project/tests/helpers/resolver', 'ember-qunit'], function (exports, _itp405FinalProjectTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_itp405FinalProjectTestsHelpersResolver['default']);\n});","define('itp405-final-project/tests/unit/controllers/create-event-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:create-event', 'Unit | Controller | create event', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)(\"date correct on create event\", function (assert) {\n    assert.expect(2);\n\n    // get the controller instance\n    var ctrl = this.subject();\n    var date = moment(moment()).add('days', 1).format('YYYY-MM-DD');\n    assert.equal(ctrl.createEventTest(), date);\n\n    date = moment(\"2016-01-01\");\n    ctrl.set('mydate', date);\n    assert.equal(ctrl.createEventTest(), \"2016-01-01\");\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('reformat time on start time change', function (assert) {\n    assert.expect(2);\n\n    // get the controller instance\n    var ctrl = this.subject();\n    var hacktime = \"2015-01-01 23:30\";\n    var x = moment(hacktime);\n    ctrl.set('startTime', x);\n    ctrl.send('timeChanged');\n    assert.equal(ctrl.get('time'), \"23:30\");\n\n    hacktime = \"2015-01-01 13:30\";\n    x = moment(hacktime);\n    ctrl.set('startTime', x);\n    ctrl.send('timeChanged');\n    assert.equal(ctrl.get('time'), \"13:30\");\n  });\n});","define('itp405-final-project/tests/unit/controllers/profile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:profile', 'Unit | Controller | profile', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('set current action should set tabs to current events', function (assert) {\n    assert.expect(3);\n\n    // get the controller instance\n    var ctrl = this.subject();\n\n    ctrl.send('setCurrent');\n\n    assert.equal(ctrl.get('current'), true);\n    assert.equal(ctrl.get('created'), false);\n    assert.equal(ctrl.get('past'), false);\n  });\n});","define('itp405-final-project/tests/unit/controllers/register-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('should update emailValid and emailInvalid on email change', function (assert) {\n    assert.expect(4);\n\n    // get the controller instance\n    var ctrl = this.subject();\n\n    ctrl.set('email', \"notavalidemail.com\");\n    // check the properties before the action is triggered\n    assert.equal(ctrl.get('emailValid'), false);\n    assert.equal(ctrl.get('emailInvalid'), true);\n\n    // trigger the action on the controller by using the `send` method,\n    // passing in any params that our action may be expecting\n    ctrl.set('email', \"validemail@email.com\");\n\n    // finally we assert that our values have been updated\n    // by triggering our action.\n    assert.equal(ctrl.get('emailValid'), true);\n    assert.equal(ctrl.get('emailInvalid'), false);\n  });\n});","define('itp405-final-project/tests/unit/controllers/results/events-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:results/events', 'Unit | Controller | results/events', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)(\"should split queries\", function (assert) {\n    assert.expect(1);\n\n    // get the controller instance\n    var ctrl = this.subject();\n\n    ctrl.set('q', \"my name i s kevin\");\n\n    var x = ['my', 'name', 'i', 's', 'kevin'];\n    assert.deepEqual(ctrl.get('queries'), x);\n  });\n});","/* jshint ignore:start */\n\nrequire('itp405-final-project/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}